{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","classes","isLit","className","onClick","evt","flipCellsAroundMe","coords","BOARD_ANIMATE_1","BOARD_ANIMATE_2","Board","createBoard","bind","flipCellsAround","isSolved","animateBoard","createNewGame","state","animating","board","animationIndex","boardSolved","totalMoves","this","solvedTimer","clearTimeout","gridSize","setState","setTimeout","handler","c","Array","from","length","map","i","r","Math","round","random","solved","forEach","includes","coord","split","Number","x","y","flipCell","markup","rIdx","key","cIdx","Component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89e56546.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Cell.css\"\n\n\nconst Cell = props => {\n\n  const handleClick = evt => {\n    const {\n      flipCellsAroundMe,\n      coords\n    } = props;\n\n    flipCellsAroundMe(coords);\n  }\n  let classes = props.isLit ? \"Cell-lit\" : \"Cell-dark\";\n\n  return (\n    <td className=\"Cell\" onClick={handleClick}>\n      <div className={classes} />\n    </td>\n  );\n}\n\nexport default Cell;","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nconst BOARD_ANIMATE_1 = [\n  [0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 0],\n  [0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0]\n];\nconst BOARD_ANIMATE_2 = [\n  [1, 1, 1, 1, 1],\n  [1, 1, 0, 1, 1],\n  [1, 0, 0, 0, 1],\n  [1, 1, 0, 1, 1],\n  [1, 1, 1, 1, 1]\n];\n\nclass Board extends Component {\n\n  static defaultProps = {\n    gridSize: 5\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.createBoard = this.createBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.isSolved = this.isSolved.bind(this);\n    this.animateBoard = this.animateBoard.bind(this);\n    this.createNewGame = this.createNewGame.bind(this);\n\n    this.state = {\n      animating: false,\n      board: this.createBoard(),\n      animationIndex: 1,\n      boardSolved: false,\n      totalMoves: 0\n    };\n  }\n\n  componentDidMount() {\n    this.solvedTimer = null;\n  }\n\n  componentWillUnmount() {\n    if (this.solvedTimer) clearTimeout(this.solvedTimer);\n  }\n\n  componentDidUpdate() {\n    if (this.state.boardSolved && !this.state.animating) {\n      if (this.props.gridSize === 5) {\n        this.setState({ animating: true });\n        let count = 0;\n        this.solvedTimer = setTimeout(function handler(c) {\n          this.animateBoard();\n          if (c < 5) {\n            c++;\n            this.solvedTimer = setTimeout(handler.bind(this), 350, c);\n          } else {\n            this.createNewGame();\n          }\n        }.bind(this), 350, count);\n      } else {\n        this.createNewGame();\n      }\n    }\n  }\n\n  createNewGame() {\n    this.setState(state => {\n      return {\n        animating: false,\n        board: this.createBoard(),\n        animationIndex: 1,\n        boardSolved: false,\n        totalMoves: 0\n      }\n    });\n  }\n\n  createBoard() {\n    const { gridSize } = this.props;\n    const board = Array.from({ length: gridSize });\n    return board.map(i => {\n      return Array.from({ length: gridSize }).map(r => {\n        return Math.round(Math.random());\n      });\n    });\n  }\n\n  isSolved() {\n    const [...board] = this.state.board;\n    let solved = true;\n    board.forEach(r => {\n      if (r.includes(1)) solved = false;\n    });\n    return solved;\n  }\n\n  flipCellsAround(coord) {\n    if (this.state.animating || this.state.isSolved) return;\n\n    let { gridSize } = this.props;\n    let [...board] = this.state.board;\n    let [x, y] = coord.split(\"-\").map(Number);\n\n    function flipCell(x, y) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < gridSize && y >= 0 && y < gridSize) {\n        board[x][y] = board[x][y] === 0 ? 1 : 0;\n      }\n    }\n\n    if (x - 1 >= 0) flipCell(x - 1, y);\n    if (x + 1 < gridSize) flipCell(x + 1, y);\n    if (y - 1 >= 0) flipCell(x, y - 1);\n    if (y + 1 < gridSize) flipCell(x, y + 1);\n    flipCell(x, y);\n\n    if (this.isSolved()) {\n      setTimeout(() => {        \n        this.setState(state => {\n          return {\n            boardSolved: true\n          };\n        });\n      }, 150);\n    }\n    this.setState(state => {\n      return { board, totalMoves: state.totalMoves + 1 };\n    });\n  }\n\n  animateBoard() {\n    this.setState(state => {\n      let { animationIndex } = state;\n      animationIndex = (animationIndex === 1) ? 2 : 1;\n      const board = (animationIndex === 1) ? BOARD_ANIMATE_1 : BOARD_ANIMATE_2;\n      return { animating: true, board, animationIndex };\n    });\n  }\n\n  render() {\n    const board = this.state.board;\n\n    const markup = board.map((r, rIdx) => {\n      return (\n        <tr key={rIdx}>\n          {\n            r.map((c, cIdx) => {\n              const coords = `${rIdx}-${cIdx}`;\n              return <Cell\n                key={coords}\n                coords={coords}\n                isLit={c === 1}\n                flipCellsAroundMe={this.flipCellsAround}\n              />\n            })\n          }\n        </tr>\n      );\n    });\n\n    return (\n      <div>\n        <div className=\"Title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody className=\"BoardTBody\">\n            {markup}\n          </tbody>\n        </table>\n        <div className=\"FooterText\">\n          <p>Total Moves: {this.state.totalMoves}</p>\n          <button className=\"myButton\" onClick={this.createNewGame}>Reset Board</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}